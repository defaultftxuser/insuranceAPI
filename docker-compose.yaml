services:
  python-app:
    build: .
    container_name: insurance_app
    env_file:
      - .env
    depends_on:
      - kafka
      - kafka-ui
      - zookeeper
      - postgres
    restart: on-failure
    volumes:
      - .:/app
    networks:
      - kafka_network
    ports:
      - "8000:8000"
    command: uvicorn --factory src.api.main:get_app --reload --host 0.0.0.0 --port 8000

  postgres:
    image: postgres:latest
    container_name: insurance_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      -   postgres_data:/var/lib/postgresql/data
    networks:
      - kafka_network
    ports:
      - "${POSTGRES_PORT}:5432"


  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"  # Port for zookeeper
    networks:
      - kafka_network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092  # Use localhost for local access
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "${KAFKA_PORT}:9092"
    networks:
      - kafka_network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - "8080:8080"  # Kafka UI port for local access
    networks:
      - kafka_network

networks:
  kafka_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
